---
title: Arrays
description: Zoom
colordes: "#e86e0a"
slug: 13_jl_arrays
weight: 13
execute:
  error: true
format: hugo
jupyter: julia-1.7
---

Arrays are mutable and indexable collections of elements.

## Vectors

Unidimensional arrays in Julia are called vectors.

### Vectors of one element

```{julia}
[3]
```
```{julia}
[3.4]
```
```{julia}
["Hello, World!"]
```

### Vectors of multiple elements

```{julia}
[3, 4]
```

## Two dimensional arrays

```{julia}
[3 4]
```
```{julia}
[[1, 3] [1, 2]]
```

## Syntax subtleties

These 3 syntaxes are equivalent:

```{julia}
[2 4 8]
```
```{julia}
hcat(2, 4, 8)
```
```{julia}
cat(2, 4, 8, dims=2)
```

These 4 syntaxes are equivalent:

```{julia}
[2
 4
 8]
```
```{julia}
[2; 4; 8]
```
```{julia}
vcat(2, 4, 8)
```
```{julia}
cat(2, 4, 8, dims=1)
```

Elements separated by semi-colons or end of lines get expanded vertically.<br>
Those separated by commas do not get expanded.<br>
Elements separated by spaces or tabs get expanded horizontally.

{{<exo>}}
Compare the outputs of the following:
{{</exo>}}

```{julia}
[1:2; 3:4]
```
```{julia}
[1:2
 3:4]
```
```{julia}
[1:2, 3:4]
```
```{julia}
[1:2 3:4]
```

## Arrays and types

In Julia, arrays can be heterogeneous:

```{julia}
[3, "hello"]
```

This is possible because all elements of an array, no matter of what types, will always sit below the `Any` type in the [type hierarchy](https://westgrid-julia.netlify.app/2022_modules/10_jl_types/#julia-types-a-hierarchical-tree).

## Initializing arrays

Below are examples of some of the functions initializing arrays:

```{julia}
rand(2, 3, 4)
```
```{julia}
rand(Int64, 2, 3, 4)
```
```{julia}
zeros(Int64, 2, 5)
```
```{julia}
ones(2, 5)
```
```{julia}
reshape([1, 2, 4, 2], (2, 2))
```
```{julia}
fill("test", (2, 2))
```

## Indexing

As in other mathematically oriented languages such as R, Julia starts indexing at `1`.

Indexing is done with square brackets:

```{julia}
a = [1 2; 3 4]
```
```{julia}
a[1, 1]
```
```{julia}
a[1, :]
```
```{julia}
a[:, 1]
```

{{<exo>}}
Index the element on the 3<sup>rd</sup> row and 2<sup>nd</sup> column of {{<c>}}b{{</c>}}:
{{</exo>}}

```{julia}
b = ["wrong" "wrong" "wrong"; "wrong" "wrong" "wrong"; "wrong" "you got it" "wrong"]
```

As in Python, by default, arrays are passed by sharing:

```{julia}
a = [1, 2, 3];
a[1] = 0;
a
```

This prevents the unwanted copying of arrays.

## Broadcasting

To apply a function to each element of a collection rather than to the collection as a whole, Julia uses broadcasting.

```{julia}
a = [-3, 2, -5]
```
```{julia}
abs(a)
```

This doesn't work because the function `abs` only applies to single elements.

By broadcasting `abs`, you apply it to each element of `a`:

```{julia}
broadcast(abs, a)
```

The dot notation is equivalent:

```{julia}
abs.(a)
```

It can also be applied to the pipe, to unary and binary operators, etc.

```{julia}
a .|> abs
```

{{<exo>}}
Try to understand the difference between the following 2 expressions:
{{</exo>}}

```{julia}
abs.(a) == a .|> abs
```
```{julia}
abs.(a) .== a .|> abs
```

{{<notes>}}
Hint: 0/1 are a short-form notations for false/true in arrays of booleans.
{{</notes>}}

## Comprehensions

Julia has an array comprehension syntax similar to Python's:

```{julia}
[ 3i + j for i=1:10, j=3 ]
```

## Comments & questions
