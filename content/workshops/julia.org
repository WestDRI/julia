#+title: Introduction to Julia
#+slug: julia
#+date: 2020-03-03
#+place: 3h workshop at Simon Fraser University

#+OPTIONS: toc:2

#+BEGIN_center
#+ATTR_HTML: :width 200
[[/img/workinprogress.svg]]
#+END_center

This workshop is part of Simon Fraser University spring school:
#+BEGIN_center
#+ATTR_HTML: :alt radius
[[/img/sfu2020poster_no_padding.png]]
#+END_center

#+HTML: <br>
#+BEGIN_sticker
[[https://www.eventbrite.ca/e/research-computing-workshops-simon-fraser-university-registration-88799572913][Register for free workshop]]
#+END_sticker

* Abstract

#+BEGIN_definition
#+BEGIN_quote
Why would I want to learn a new language? I already know R/python.
#+END_quote

R and python are interpreted languages: the code is executed directly, without prior-compilation. This is extremely convenient: it is what allows you to run code in an interactive shell. The price to pay is low performance: R and python are simply not good at handling large amounts of data. To overcome this limitation, users often turn to C or C++ for the most computation-intensive parts of their analyses. These are compiled—and extremely efficient—languages, but the need to use multiple languages and the non-interactive nature of compiled languages make this approach tedious.

Julia uses just-in-time (JIT) compilation: the code is compiled at run time. This combines the interactive advantage of interpreted languages with the efficiency of compiled ones. Basically, it feels like running R or python, while it is almost as fast as C. This makes Julia particularly well suited for big data analyses, machine learning, or heavy modelling.

In addition, multiple dispatch (generic functions with multiple methods depending on the types of all the arguments) is at the very core of Julia. This is extremly convenient, cutting on conditionals and repetitions, and allowing for easy extensibility without having to rewrite code.

Finally, Julia shines by its extremely clean and concise syntax. This last feature makes it easy to learn and really enjoyable to use.

In this workshop, which does not require any prior experience in Julia (experience in another language—e.g. R or python—would be best), we will go over the basics of Julia's syntax and package system; then we will push the performance aspect further by looking at how Julia can make use of clusters for large scale parallel computing.
#+END_definition

* Software requirements

#+BEGIN_box
For this workshop, you will need:

*1 - A terminal emulator and an SSH client for remote access to clusters*

/Windows:/ \\
Install the free Home Edition of [[https://mobaxterm.mobatek.net/download.html][MobaXTerm]].

/MacOS:/ \\
Terminal and SSH are pre-installed.

/Linux:/ \\
You can use xterm or the terminal emulator of your choice.\\
If SSH does not come bundled with your distribution, install [[https://www.openssh.com/][OpenSSH]].

*2 - The current [[https://julialang.org/downloads/][Julia stable release]]*

*3 - A good text editor or the Julia IDE*

You will need a capable text editor (e.g. Emacs, Vim, Visual Studio Code, Sublime, Nano, Atom, Notepad++).\\
If you would rather play in the Julia IDE, you can find the installation instructions [[http://docs.junolab.org/latest/man/installation][here]].
#+END_box

* Introducing Julia

** Background

*** Brief history

Started in 2009 by Jeff Bezanson, [[https://en.wikipedia.org/wiki/Stefan_Karpinski][Stefan Karpinski]], [[https://en.wikipedia.org/wiki/Viral_B._Shah][Viral B. Shah]], and [[https://en.wikipedia.org/wiki/Alan_Edelman][Alan Edelman]], the general-purpose programming language Julia was launched in 2012 as free and open source software. Version 1.0 was released in 2018.

[[https://www.rust-lang.org/][Rust]] developer Graydon Hoare wrote an interesting [[https://graydon2.dreamwidth.org/189377.html][post]] which places Julia in a historical context of programming languages.

*** Why another language?

**** JIT

Computer languages mostly fall into two categories: *compiled languages* and *interpreted languages*.

***** Compiled languages

Compiled languages require two steps:

- in a first step the code you write in a human-readable format (the source code, usually in plain text) gets compiled into machine code

- it is then this machine code that is used to process your data

So you write a script, compile it, then use it.

[[/img/compiled_language.png]]

Because machine code is a lot easier to process by computers, compiled languages are fast. The two step process however makes prototyping new code less practical, these languages are hard to learn, and debugging compilation errors can be challenging.

Examples of compiled languages include C, C++, Fortran, Go, and Haskell.

***** Interpreted languages

Interpreted languages are executed directly which has many advantages such as dynamic typing and direct feed-back from the code and they are easy to learn, but this comes at the cost of efficiency. The source code can facultatively be bytecompiled into non human-readable, more compact, lower level bytecode which is read by the interpreter more efficiently.

[[/img/interpreted_language.png]]

Examples of interpreted languages include R, Python, Perl, and JavaScript.

***** JIT compiled languages

Julia uses [[https://en.wikipedia.org/wiki/Just-in-time_compilation][just-in-time compilation]] or JIT based on [[https://en.wikipedia.org/wiki/LLVM][LLVM]]: the source code is compiled at run time. This combines the flexibility of interpretation with the speed of compilation, bringing speed to an interactive language. It also allows for dynamic recompilation, continuous weighing of gains and costs of the compilation of parts of the code, and other on the fly optimizations.

Of course, there are costs here too. They come in the form of overhead time to compile code the first time it is run and increased memory usage.

**** Multiple dispatch

opt-in type checking

** Getting started

*** Where to find resources

The main place to look for resources is the Julia [[https://julialang.org/][website]].

**** Documentation

- The official Julia [[https://docs.julialang.org/en/v1/][manual]]

- Online [[https://julialang.org/learning/][training]] material

- The Julia [[https://www.youtube.com/user/JuliaLanguage][YouTube]] channel

- A [[https://www.juliabloggers.com/][blog]] aggregator for Julia

**** Getting help

- Discourse [[https://discourse.julialang.org/][forum]]

- [[https://stackoverflow.com/tags/julia][[julia] ]]tag on Stack Overflow

- [[https://app.slack.com/client/T68168MUP/C67910KEH][Slack]] team (you need to agree to the community code of conduct at slackinvite.julialang.org to receive an invitation)

- [[https://twitter.com/search?q=%23julialang][#julialang]] hashtag on Twitter

- [[https://www.reddit.com/r/Julia/][Subreddit]]

- [[https://gitter.im/JuliaLang/julia][Gitter]] channel

- [[https://webchat.freenode.net/#julia][#julia]] IRC channel on Freenode

*** Nice ways to run Julia

Copying and pasting code from a script to the Julia REPL works, but there are nicer ways to integrate the two.

Here are a few:

**** Emacs

- through the [[https://github.com/JuliaEditorSupport/julia-emacs][julia-emacs]] and [[https://github.com/tpapp/julia-repl][julia-repl]] packages
- through the [[https://github.com/emacs-ess/ESS][ESS]] package
- through the [[http://millejoh.github.io/emacs-ipython-notebook/][Emacs IPython Notebook]] package if you want to access Jupyter notebooks in Emacs

**** Juno

[[https://junolab.org/][Juno]] is an IDE for Julia built on [[https://atom.io/][Atom]].

**** Jupyter

[[https://jupyter.org/][Project Jupyter]] allows to create interactive programming documents through its web-based JupyterLab environment and its Jupyter Notebook.

* Hands-on

** Working with Julia locally

While we will be interacting with Julia through the REPL (read–eval–print loop: the interactive Julia shell) to develop and test our code, we want to save it in a script for future use and to submit to the cluster.

#+BEGIN_export html
Julia scripts are text files with the extension <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">.jl</span>.
#+END_export

#+BEGIN_export html
Create a folder called <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">julia_workshop</span> somewhere in your system and create a file <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">julia_script.jl</span> in it.
#+END_export

*** REPL keybindings

In the REPL, you can use standard command line keybindings:

#+BEGIN_example
C-c		cancel
C-d		quit
C-l		clear console

C-u		kill from the start of line
C-k		kill until the end of line

C-a		go to start of line
C-e		go to end of line

C-f		move forward one character
C-b		move backward one character

M-f		move forward one word
M-b		move backward one word

C-d		delete forward one character
C-h		delete backward one character

M-d		delete forward one word
M-Backspace	delete backward one word

C-p		previous command
C-n		next command

C-r		backward search
C-s		forward search
#+END_example

In addition, there are 4 REPL modes:

#+BEGIN_export html
<span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #339933"><b>julia></b></span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The main mode in which you will be running your code.<br><br>
#+END_export

#+BEGIN_export html
<span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #dab314"><b>help?></b></span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A mode to easily access documentation.<br><br>
#+END_export

#+BEGIN_export html
<span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #b30000"><b>shell></b></span> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A mode in which you can run bash commands from within Julia.<br><br>
#+END_export

#+BEGIN_export html
<span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #2e5cb8"><b>(env) pkg></b></span> &nbsp;&nbsp; A mode to easily perform actions on packages with Julia package manager.<br><br>
Enter the various modes with <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">?</span>&nbsp; <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">;</span>&nbsp; <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">]</span> and go back to the regular mode with the <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">Backspace</span> key.
#+END_export

#+BEGIN_export html
<span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">env</span> is the name of your current project environment. Project environments are similar to Python's virtual environments and allow you, for instance, to have different package versions for different projects. By default, it is the current Julia version. So what you will see is <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">(v1.3) Pkg</span>.
#+END_export

*** Startup options

You can configure Julia by creating the file:

#+BEGIN_src sh
~/.julia/config/startup.jl
#+END_src

*** Packages

**** Standard library

#+BEGIN_export html
Julia comes with a collection of packages. In Linux, they are in <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">/usr/share/julia/stdlib/vx.x</span>.
#+END_export

Here is the list:

#+BEGIN_example
Base64
CRC32c
Dates
DelimitedFiles
Distributed
FileWatching
Future
InteractiveUtils
Libdl
LibGit2
LinearAlgebra
Logging
Markdown
Mmap
Pkg
Printf
Profile
Random
REPL
Serialization
SHA
SharedArrays
Sockets
SparseArrays
Statistics
SuiteSparse
Test
Unicode
UUIDs
#+END_example

**** Installing additional packages

#+BEGIN_export html
You can install additional packages.<br>
These go to your personal library in <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">~/.julia</span> (this is also where your REPL history is saved).
#+END_export

All registered packages are on GitHub and can easily be searched [[https://pkg.julialang.org/docs/][here]].\\
The GitHub star system allows you to easily judge the popularity of a package and to see whether it is under current development.

In addition to these, there are unregistered packages and you can build your own.

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Challenge</span><br>
Try to find a list of popular plotting packages.
#+END_export
#+END_challenge

You can manage your personal library easily in package mode with the commands:

#+BEGIN_example
add &lt;package&gt;		install &lt;package&gt;
rm &lt;package&gt;		uninstall &lt;package&gt;
up &lt;package&gt;		upgrade &lt;package&gt;

st			check which packages are installed
up			upgrade all packages
 #+END_example

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Challenge</span><br>
Check your list of packages, install the packages xxxxxx, then check that list again.
#+END_export
#+END_challenge

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Challenge</span><br>
Now go explore your <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">~/.julia</span> directory. If you don't find it, make sure that your file explorer allows you to see hidden files.
#+END_export
#+END_challenge

**** Loading packages

#+BEGIN_export html
Whether a package from the standard library or one you installed, before you can use a package you need to load it. This has to be done at each new Julia session so the code to load packages should be part of your scripts.<br><br>
This is done with the <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">using</span> command (e.g. <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">using Pkg</span>).
#+END_export

*** Julia basics

**** Finding documentation

#+BEGIN_export html
As we already saw, you can use <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">?</span> to enter the help mode.<br>
To print the list of functions containing a certain word in their description, you can use <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">apropos()</span>. Example:
#+END_export

#+BEGIN_src julia
apropos("truncate")
#+END_src

**** Let's try a few commands

#+BEGIN_src julia
versioninfo()
VERSION

x = 10
x
x = 2;
x
y = x;
y
ans
ans + 3

a, b, c = 1, 2, 3
b

3 + 2
+(3, 2)

a = 3
2a
a += 7
a

2\8

a = [1 2; 3 4]
b = a
a[1, 1] = 0
b

[1, 2, 3, 4]
[1 2; 3 4]
[1 2 3 4]
[1 2 3 4]'
collect(1:4)
collect(1:1:4)
1:4
a = 1:4
collect(a)

[1, 2, 3] .* [1, 2, 3]

4//8
8//1
1//2 + 3//4

a = true
b = false
a + b
#+END_src

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Your turn:</span><br>
What does <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">;</span> at the end of a command do?<br>
What is surprising about <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">2a</span>?<br>
What does <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">+=</span> do?<br>
What does <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">.+</span>do?
#+END_export
#+END_challenge

#+BEGIN_src julia
a = [3, 1, 2]

sort(a)
println(a)

sort!(a)
println(a)
#+END_src

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Your turn:</span><br>
What does <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">!</span> at the end of a function name do?
#+END_export
#+END_challenge

**** Comments

#+BEGIN_src julia
# Single line comment

#=
Comments can
also contain
multiple lines
=#

x = 2;    # And they can be added at the end of lines
#+END_src

**** A few fun quirks

#+BEGIN_src julia
\omega		  # press TAB
\sum	 	  # press TAB
\sqrt		  # press TAB
\in		  	  # press TAB
\: phone:	  # (no space after the colon. I added it to prevent parsing) press TAB

pi
Base.MathConstants.golden
#+END_src

**** Data types

#+BEGIN_src julia
typeof(2)
typeof(2.0)
typeof("hello")
typeof(true)
#+END_src

**** Indexing

Indexing is done with square brackets. As in R and unlike in C++ or Python, Julia starts indexing at 1, not at 0.

#+BEGIN_src julia
a = [1 2; 3 4]
a[1, 1]
a[1, :]
#+END_src

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Your turn:</span><br>
How can I get the second column?<br>
How can I get the tuple <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">(2, 4)</span>? (a tuple is a list of elements)
#+END_export
#+END_challenge

**** For loops

#+BEGIN_src julia
for i in 1:10
    println(i)
end


for i in 1:3, j = 1:2
    println(i * j)
end
#+END_src

**** Predicates and conditionals

#+BEGIN_src julia
a = 2
b = 2.0

if a == b
    println("It's true")
else
    println("It's false")
end

# This can be written in a terse format
# predicate ? if true : if false
a == b ? println("It's true") : println("It's false")

if a === b
    println("It's true")
else
    println("It's false")
end
#+END_src

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Your turn:</span><br>
What is the difference between <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">==</span> and <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">===</span>?
#+END_export
#+END_challenge

Predicates can be built with many other operators and functions. For example:

#+BEGIN_src julia
occursin("that", "this and that")
4 < 3
a != b
2 in 1:3
3 <= 4 && 4 > 5
3 <= 4 || 4 > 5
#+END_src

**** Functions

#+BEGIN_src julia
function addTwo(a)
    a + 2
end

addTwo(3)

# This can be written in a terse format
addtwo = a -> a + 2

# With default arguments
function addSomethingOrTwo(a, b = 2)
    a + b
end

addSomethingOrTwo(3)
addSomethingOrTwo(3, 4)
#+END_src

**** Plotting

#+BEGIN_src julia
using UnicodePlots
histogram(randn(1000), nbins=40)
#+END_src

#+BEGIN_src julia
using Plots, Distributions, StatsPlots # This will take a while the first time
gr()                                   # Backend
x = 1:10; y = rand(10, 2);
p1 = plot(Normal(0, 1))
p2 = histogram(randn(10000), nbins=100)
p3 = scatter(x, y)
p4 = plot(x, y)
plot(p1, p2, p3, p4)
#+END_src

*** Parallel programming

#+BEGIN_src sh
# To know how many processing units you have on your machine
nproc

# To know what they are made of (# of sockets, cores, and threads)
lscpu | grep -E '(S|s)ocket|Thread|^CPU\(s\)'
#+END_src

** Working with Julia on the cluster

Now that we have a running script, let's submit a job to the cluster.

*** Log in to the cluster

Open a terminal emulator.

/Windows users, launch [[https://mobaxterm.mobatek.net/][MobaXTerm]]./ \\
/MacOS users, launch Terminal./ \\
/Linux users, launch xterm or the terminal emulator of your choice./

#+BEGIN_src sh
ssh userxxx@cassiopeia.c3.ca

# enter password
#+END_src

You are now in our training cluster.

*** Copy your Julia script to the training cluster

#+BEGIN_export html
We will create a <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">julia_workshop</span> directory in <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">~/scratch</span>, then copy our julia script in it.
#+END_export

#+BEGIN_src sh
mkdir ~/scratch/julia_job
#+END_src

Open a new terminal window and from your local terminal (make sure that you are not on the remote terminal by looking at the bash prompt) run:

#+BEGIN_src sh
scp /path/to/your/local/julia_script.jl userxxx@cassiopeia.c3.ca:scratch/julia_job

# enter password
#+END_src

*** Access Julia

This is done with the [[https://github.com/TACC/Lmod][Lmod]] tool through the [[https://docs.computecanada.ca/wiki/Utiliser_des_modules/en][module]] command. You can find the full documentation [[https://lmod.readthedocs.io/en/latest/010_user.html][here]] and below are the subcommands you will need:

#+BEGIN_src sh
# get help on the module command
module help
module --help
module -h

# list modules that are already loaded
module list

# see which modules are available for Julia
module spider julia

# see how to load julia 1.3
module spider julia/1.3.0

# load julia 1.3 with the required gcc module first
# (the order is important)
module load gcc/7.3.0 julia/1.3.0

# you can see that we now have Julia loaded
module list
#+END_src

So the normal process to gain access to Julia version 1.3.0 in the cluster would be to run:
#+BEGIN_src sh
module load gcc/7.3.0 julia/1.3.0
#+END_src

#+BEGIN_export html
We would then install the Julia packages we need. By default, Julia packages are installed in <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.4rem; box-shadow: 0px 0px 3px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">~/.julia</span>.

In order to take a lot of burden out of our training cluster however, since we are all running the same code and using the same packages, instead of each of us installing the packages in our home directories, we will all use packages which have already been installed in <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">/project/shared/bio</span>.

So, for the purpose of this workshop, instead of loading Julia and installing the required packages, we will simply run a little script called <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">/project/shared/syncHPC/startJulia.sh</span>.
#+END_export

Let's see what is in that script:

#+BEGIN_src sh
cat /project/shared/syncHPC/startJulia.sh
#+END_src

As you can see, the script loads the Julia module. The rest sets environment variables to the packages path.

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Challenge</span><br>
Launch Julia, get into the package mode, and make sure the packages we need are installed.
#+END_export
#+END_challenge

*** Job script

We will not run an interactive session with Julia on the cluster: we already have a julia script ready. All we need to do is to write a job script to submit to Slurm, the job scheduler used by the Compute Canada clusters.

#+BEGIN_export html
Save your Slurm job script in the file <span style="font-family: 'Source Code Pro', 'Lucida Console', monospace; font-size: 1.4rem; padding: 0.3rem; box-shadow: 0px 0px 2px rgba(0,0,0,0.3); border-radius: 5%; background-color: #f0f3f3; color: #000000">~/scratch/julia_job/job_script.sh</span>.
#+END_export

In this script, we need:

#+BEGIN_src sh
#!/bin/bash
#SBATCH --job-name=julia		# job name
#SBATCH --time=00:01:00			# max walltime
#SBATCH --mem=100M				# max memory
#SBATCH --output=julia%j.out	# file name for the output
#SBATCH --error=julia%j.err		# file name for errors
# %j gets replaced with the job number

# Normally we would load the necessary modules with:
# module load gcc/7.3.0 julia/1.3.0
# But here we will instead execute the script startJulia.sh:
source /project/shared/syncHPC/startJulia.sh
# This loads the modules and changes environment variables
# so that Julia looks for packages in /project/shared/bio

# Run our Julia script
julia julia_script.jl
#+END_src

Now, we can submit our job to the cluster with:

#+BEGIN_src sh
cd ~/scratch/julia_job
sbatch job_script.sh
#+END_src

And we can check its status with:

#+BEGIN_src sh
sq
#+END_src

*** Parallel programming

#+BEGIN_challenge
#+BEGIN_export html
<span style="color: #e10070">Your turn:</span><br>
How many processing units are there on our training cluster?<br>
How many sockets?<br>
How many cores?<br>
How many threads?
#+END_export
#+END_challenge

