---
title: Basics of the Julia language
description: Zoom
colordes: "#e86e0a"
slug: 07_jl_basics
weight: 7
execute:
  error: true
format: hugo
jupyter: julia-1.7
---

*Date:* {{<m>}}{{<s>}} Tuesday, May 31 \
*Time:* {{<m>}}{{<s>}} 10:30 am Pacific Time \
*Access:* {{<m>}} You should have received the meeting id and password by email.

{{<notes>}}
Please have a look in your spam box if you haven't received the email.
{{</notes>}}

## Comments

Comments do not get evaluated by Julia and are for humans only.

```{julia}
# Comments in Julia are identified by hastags
```

```{julia}
#=
Comments can also spread over multiple lines
if you enclose them with this syntax
=#
```

```{julia}
x = 2          # Comments can be added at the end of lines
```

## Basic operations

```{julia}
# By default, Julia returns the output
2 + 3
```
```{julia}
# Ending semi-colons suppress the output
3 + 7;
```
```{julia}
# Alternative syntax that can be used with operators
+(2, 5)
```
```{julia}
# Operation priority follows standard rules
3 + 2 ^ 3 * 10
```

### More exotic operators

```{julia}
# Usual division
6 / 2
```
```{julia}
# Inverse division
2 \ 6
```
```{julia}
# Integer division (division truncated to an integer)
7 √∑ 2
```
```{julia}
# Remainder
7 % 2        # equivalent to rem(7, 2)
```

## Variables

A variable is a name bound to a value:

```{julia}
a = 3
```

These names are extremely flexible and {{<a "https://docs.julialang.org/en/v1/manual/unicode-input/" "can use Unicode character:">}}

```{.julia}
\omega		 # press TAB
\sum         # press TAB
\sqrt	     # press TAB
\in          # press TAB
\:emoji:     # press TAB
# for the last example, replace the word "emoji" by e.g. "phone" or "snail"
```

```{julia}
Œ¥ = 8.5;
üêå = 3;
Œ¥ + üêå
```

Admittedly, using emojis doesn't seem very useful, but using Greek letters to write equations really makes Julia a great math and physics language:

```{julia}
œÉ = 3
Œ¥ = œÄ
œï = 8

(5œÉ + 3Œ¥) / œï
```

{{<notes>}}
Note how the multiplication operator can be omitted when this does not lead to confusion.<br>

Also note how the mathematical constant œÄ is available in Julia without having to load any module.
{{</notes>}}


### Variable names

Hard rules:

- They must begin with a letter or an underscore

- They cannot take the names of {{<a "https://docs.julialang.org/en/v1/base/base/#Keywords" "built-in keywords">}} such as `if`, `do`, `try`, `else`

- They cannot take the names of built-in constants (e.g. `œÄ`) and keywords in use in a session

```{julia}
false = 3
```

In addition, the {{<a "https://docs.julialang.org/en/v1/manual/style-guide/#Style-Guide-1" "Julia Style Guide">}} recommends to follow the following conventions:

- Use lower case

- Word separation can be indicated by underscores, but better not to use them if the names can be read easily enough without them

### Printing

```{julia}
# To print the value of a variable in the REPL or in Jupyter, you only need to call it
a
```
```{julia}
# In a script, you have to use println
println(a)
```

### The ans variable

The keyword `ans` is a variable which, in the REPL, automatically takes the value of the last computation:

```{.julia}
a = 3;
ans + 1
```

```
4
```

### Assignment

You can reassign new values to variables:

```{julia}
a = 3;
a = -8.2;
a
```

You can define multiple variables at once:

```{julia}
a, b, c = 1, 2, 3
b
```

## Quotes

Note the difference between single and double quotes:

```{julia}
typeof("a")
```

```{julia}
typeof('a')
```

```{julia}
"This is a string"
```

```{julia}
'This is not a sring'
```
```{julia}
'a'
```




```

## Comments & questions
