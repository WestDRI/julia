---
title: Makie
subtitle: <b>A data visualization ecosystem for Julia</b>
institute: <img src="beautifulmakie.png" width="50%">
date: <em>Marie-Helene Burle</em> <br> Wednesday, October 26 <br><img src="sfudrac.png" width="45%">
execute:
  error: true
  echo: true
format:
  revealjs:
    theme: [default, custom.scss]
    logo: sfudrac_favicon_nobg.png
    highlight-style: monokai
    code-line-numbers: false
jupyter: julia-1.8
---

## Plotting in Julia {.smaller}
<br>

. . .

Many options:

- [Plots.jl](https://github.com/JuliaPlots/Plots.jl){target="_blank"}: high-level API for working with different back-ends (GR, Pyplot, Plotly...)
- [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl){target="_blank"}: Julia interface to Matplotlib's `matplotlib.pyplot`
- [PlotlyJS.jl](https://github.com/JuliaPlots/PlotlyJS.jl){target="_blank"}: Julia interface to plotly.js
- [PlotlyLight.jl](https://github.com/JuliaComputing/PlotlyLight.jl){target="_blank"}: the fastest plotting option in Julia by far, but limited features
- [Gadfly.jl](https://github.com/GiovineItalia/Gadfly.jl){target="_blank"}: following the grammar of graphics popularized by Hadley Wickham in R
- [VegaLite.jl](https://github.com/queryverse/VegaLite.jl){target="_blank"}: grammar of interactive graphics
- [PGFPlotsX.jl](https://github.com/KristofferC/PGFPlotsX.jl){target="_blank"}: Julia interface to the PGFPlots LaTeX package
- [UnicodePlots.jl](https://github.com/JuliaPlots/UnicodePlots.jl){target="_blank"}: plots in the terminal ðŸ™‚

. . .

- **[Makie.jl](https://github.com/MakieOrg/Makie.jl){target="_blank"}: powerful plotting ecosystem: animation, 3D, GPU optimization**

## Makie ecosystem {.smaller}

. . .

- Main package:

	+ `Makie.jl`: plots functionalities. Backend needed to render plots into images or vector graphics

. . .

- Backends:

	+ `CairoMakie.jl`: vector graphics or high-quality 2D plots (no true 3D). Creates, but does not display plots

	+ `GLMakie.jl`: true 3D rendering and interactivity in [GLFW](https://www.glfw.org/){target="_blank"} window (no vector graphics)

	+ `WGLMakie.jl`: web version of `GLMakie` (plots rendered in a browser instead of a window)

# Syntax

## Figure

Load the package\
Here, we are using CairoMakie

```{julia}
using CairoMakie                        # no need to import Makie itself
```

:::: {.columns}
::: {.column width="48%"}
<br>
Create a `Figure` (container object)

```{julia}
fig = Figure()
```
:::
::: {.column width="4%"}

:::
::: {.column width="48%"}
<br>
<br>
```{julia}
typeof(fig)
```
:::
::::

---

You can customize a `Figure`:

```{julia}
fig2 = Figure(backgroundcolor = :grey22, resolution=(300, 300))
```

Makie uses [Colors.jl](https://github.com/JuliaGraphics/Colors.jl){target="_blank"} as a dependency \
You can find a list of all named colours [here](https://juliagraphics.github.io/Colors.jl/stable/namedcolors/){target="_blank"}

---

To use CSS specification (e.g. hex), you need to install Colors.jl explicitly and use [its color parsing capabilities](http://juliagraphics.github.io/Colors.jl/stable/constructionandconversion/#Color-Parsing){target="_blank"}

```{julia}
using Colors
fig3 = Figure(backgroundcolor = colorant"#adc2eb")
```

## Axis

:::: {.columns}
::: {.column width="48%"}
<br>
Then, you can create an `Axis`

```{julia}
ax = Axis(Figure()[1, 1])
```
:::
::: {.column width="4%"}

:::
::: {.column width="48%"}
<br>
<br>
```{julia}
typeof(ax)
```
:::
::::

---

```{julia}
Axis(fig3[1, 1])  # fig3[1, 1] sets the subplot layout: fig[row, col]
fig3
```

---

```{julia}
Axis(fig[2, 3])  # This is what happens if we change the layout
fig
```

---

```{julia}
Axis(fig3[2, 3])  # We can add another axis on fig3
fig3
```

---

Axis are customizable

```{julia}
fig4 = Figure()
Axis(fig4[1, 1],
     xlabel="x label",
     ylabel="y label",
     title="Title of the plot")
fig4
```
