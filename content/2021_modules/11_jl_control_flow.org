#+title: Control flow
#+description: Reading
#+colordes: #2d5986
#+slug: 11_jl_control_flow
#+weight: 11

* Conditional statements

** if

#+BEGIN_src julia
if <predicate>
    <do if true>
end
#+END_src

/(If predicate evaluates to false, do nothing)./

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x >= 0
        println("x is positive")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

Predicates can be built with many operators and functions.

#+BEGIN_ex
Examples of predicates:
#+END_ex

#+BEGIN_src julia
occursin("that", "this and that")
4 < 3
a != b
2 in 1:3
3 <= 4 && 4 > 5
3 <= 4 || 4 > 5
#+END_src

** if else

#+BEGIN_src julia
if <predicate>
    <do if true>
else
    <do if false>
end
#+END_src

#+BEGIN_ex
Examples:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x >= 0
        println("x is positive")
    else
        println("x is negative")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

#+BEGIN_src julia
a = 2
b = 2.0

if a == b
      println("It's true")
  else
      println("It's false")
  end

if a === b
      println("It's true")
  else
      println("It's false")
  end
#+END_src

This can be written in a terse format:

#+BEGIN_src julia
<predicate> ? <do if true> : <do if false>
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
a === b ? println("It's true") : println("It's false")
#+END_src

** if elseif else

#+BEGIN_src julia
if <predicate1>
    <do if predicate1 true>
elseif <predicate2>
    <do if predicate1 false and predicate2 true>
else
    <do if predicate1 and predicate2 false>
end
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x > 0
        println("x is positive")
    elseif x == 0
        println("x is zero")
    else
        println("x is negative")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

* Loops

~while~ and ~for~ loops follow a syntax similar to that of functions:

#+BEGIN_src julia
for name = ["Paul", "Lucie", "Sophie"]
    println("Hello $name")
end
#+END_src

#+BEGIN_src julia
for i = 1:3, j = 3:5
    println(i + j)
end
#+END_src

#+BEGIN_src julia
i = 0

while i <= 10
    println(i)
    global i += 1
end
#+END_src

* Comments & questions
