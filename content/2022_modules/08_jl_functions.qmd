---
title: Functions
description: Zoom
colordes: "#e86e0a"
slug: 08_jl_functions
weight: 8
execute:
  error: true
format: hugo
jupyter: julia-1.7
---

Functions are objects containing a set of instructions.<br>
When you pass a tuple of argument(s) (possibly an empty tuple) to them, you get one or more values as output.

## Operators

Operators are functions and can be written in a way that shows the tuple of arguments more explicitly:

```{julia}
3 + 2 == +(3, 2)  # `==` tests for equality
```
```{julia}
+(3, 2)
```

## Function definition

There are 2 ways to define a new function:

### Long form

```{.julia}
function <name>(<arguments>)
    <body>
end
```

{{<ex>}}
Example:
{{</ex>}}

```{julia}
function hello1()
    println("Hello")
end
```

### Assignment form

```{.julia}
<name>(<arguments>) = <body>
```

{{<ex>}}
Example:
{{</ex>}}

```{julia}
hello1() = println("Hello")
```

The function `hello1` defined with this compact syntax is exactly the same as the one we defined above.

### Stylistic conventions

Julia suggests to use lower case, without underscores, as function names.

## Calling functions

Since you pass a tuple to a function when you run it, you call a function by appending parentheses to its name:

```{julia}
hello1()
```

{{<notes>}}
Here, our function does not take any argument, so the tuple is empty.
{{</notes>}}

## Arguments

### No argument

Our function `hello` does not accept any argument. If we pass an argument, we get an error message:

```{julia}
hello1("Bob")
```

### One argument

To define a function which accepts an argument, we need to add a placeholder for it in the function definition.

{{<ex>}}
So let's try this:
{{</ex>}}

```{julia}
function hello2(name)
    println("Hello name")
end
```

```{julia}
hello2("Bob")
```

Mmm ... not quite ... this function works but does not give the result we wanted.

Here, we need to use {{<a "https://en.wikipedia.org/wiki/String_interpolation" "string interpolation:">}}

```{julia}
function hello3(name)
    println("Hello $name")
end
```

`$name` in the body of the function points to `name` in the tuple of argument.

When we run the function, `$name` is replaced by the value we used in lieu of `name` in the function definition:

```{julia}
hello3("Bob")
```

{{<ex>}}
Note that this dollar sign is only required with strings. Here is an example with integers:
{{</ex>}}

```{julia}
function cube(a)
    a ^ 3
end

cube(4)
```

### Multiple arguments

Now, let's write a function which accepts 2 arguments. For this, we put 2 placeholders in the tuple passed to the function in the function definition:

```{julia}
function hello4(name1, name2)
    println("Hello $name1 and $name2")
end
```

This means that this function expects a tuple of 2 values:

```{julia}
hello4("Bob", "Pete")
```

{{<exo>}}
See what happens when you pass no argument, a single argument, or three arguments to this function.
{{</exo>}}

### Default arguments

You can set a default value for some or all arguments. In this case, the function will run with or without a value passed for those arguments. If no value is given, the default is used. If a value is given, it will replace the default.

{{<ex>}}
Here is an example:
{{</ex>}}

```{julia}
function hello5(name="")
    println("Hello $name")
end
```
```{julia}
hello5()
```
```{julia}
hello5("Bob")
```

