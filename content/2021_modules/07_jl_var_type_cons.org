#+title: Variables, types, and constructors
#+description: Zoom
#+colordes: #e86e0a
#+slug: 07_jl_var_type_cons
#+weight: 7

#+OPTIONS: toc:nil

* Zoom session

#+BEGIN_def
/Time:/ {{<m>}} 11 am Pacific Time. \\
/Access:/ {{<s>}}{{<s>}} You should have received the meeting id and password by email.
#+END_def

* Slides

/Click below to open the presentation.\\
Once in the presentation, navigate the slides with the left and right arrows and refresh any page to show the link that will take you back here./

#+BEGIN_export html
<a href="https://westgrid-slides.netlify.app/jl_var_type_con/#/"><p align="center"><img src="/img/var_type_con.png" title="" width="100%" style="border-style: solid; border-width: 1.5px 1.5px 0 2px; border-color: black"/></p></a>
#+END_export

* Variables

A variable is a name bound to a value:

#+BEGIN_src julia
a = 3
#+END_src

Notice that, when you are in the REPL, Julia returns the value when you assign it to a variable. If you would like to prevent this, you need to add a semi-colon at the end of the expression:

#+BEGIN_src julia
b = "Hello, World!";
#+END_src

To print a value in the REPL, you only need to call it:

#+BEGIN_src julia
a
#+END_src

If you want to print it while running a script however, you need to use the ~println()~ function:

#+BEGIN_src julia
println(a)
#+END_src

You can reassign values to variables:

#+BEGIN_src julia
a = 3;
a = -8,2;
a
#+END_src

You can define multiple variables at once:

#+BEGIN_src julia
a, b, c = 1, 2, 3
b
#+END_src

Variables in Julia are case-sensitive and can include Unicode characters:

#+BEGIN_src julia
Î´ = 8.5;
#+END_src

[[https://docs.julialang.org/en/v1/base/base/#Keywords][Built-in keywords]] are not allowed. Neither are built-in constants and keywords in use in a session.

#+BEGIN_src julia
false = 3;

> ERROR: syntax: invalid assignment location "false"
#+END_src

The keyword ~ans~ is a variable which, in the REPL, automatically takes the value of the last computed value:

#+BEGIN_src sh
a = 3
typeof(ans)
ans + 1

b = "test"
typeof(ans)
#+END_src

* Unicode support

[[https://docs.julialang.org/en/v1/manual/unicode-input/][You can enter Unicode characters via tab completion of LaTeX abbreviations]]:

#+BEGIN_src julia
\omega		 # press TAB
\sum             # press TAB
\sqrt	     # press TAB
\in          # press TAB
\:phone :    # no space before colon (I added it to prevent parsing), press TAB
#+END_src

* Comments

Comments do not get evaluated.

#+BEGIN_src julia
# Single line comment

#=
Comments can also spread over multiple lines
if you enclose them with this syntax
=#

x = 2;          # comments can be added at the end of lines
#+END_src

* Data types

** Type systems

*** Static type systems

In static type systems, the type of every expression is known and checked before the program is executed. This allows for faster execution of the program, but it is more constraining.

#+BEGIN_note
Examples of statically typed languages: C, C++, Java, Fortran, Haskell.
#+END_note

*** Dynamic type systems

In dynamic type systems, the type safety of the program is checked at runtime. This makes for more fluid, but slower and languages.

#+BEGIN_note
Examples of dynamically typed languages: Python, JavaScript, PHP, Ruby, Lisp.
#+END_note

*** Julia: dynamically typed with optional type declaration

You don't have to define the types:

#+BEGIN_src julia
typeof(2)
typeof(2.0)
typeof("Hello, World!")
typeof(true)
typeof((2, 4, 1.0, "test"))
#+END_src

You can however do so for clearer, faster, and more robust code:

#+BEGIN_src julia
function floatsum(a, b)
    (a + b)::Float64
end

floatsum(2.3, 1.0)
#+END_src

This passed the check.

#+BEGIN_src julia
floatsum(2, 4)

> ERROR: TypeError: in typeassert, expected Float64, got a value of type Int64
#+END_src

This did not...

#+BEGIN_note
Type declaration is not yet supported on global variables. So this only works in local contexts.
#+END_note

** Types in Julia

[[https://docs.julialang.org/en/v1/manual/types/][Julia's type system]] is much more elaborate than a collection of object implementations: it is a conceptual hierarchical tree, at the bottom of which are the *concrete types*. Above them are several levels of *abstract types* which only exist as concepts to allow for the construction of code suitable for a collection of concrete types. At the very top is the ~Any~ type, encompassing all types.

{{<img src="/img/type_nw.png" margin="5rem" title="" width="70%" line-height="2rem">}}
<center>{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}{{<m>}}From <a href="https://www.oreilly.com/library/view/learning-julia-abstract/9781491999585/ch01.html">O'Reilly</a></center>
{{</img>}}

* Quotes

Notice the difference between single and double quotes:

#+BEGIN_src julia
typeof("a")
typeof('a')

println("This is a string")
println('Ouch')

> ERROR: syntax: character literal contains multiple characters
#+END_src

* Operators

The operators are functions. For instance, you can use the addition operator (~+~) in 2 ways:

#+BEGIN_src julia
3 + 2
+(3, 2)
#+END_src

The multiplication operator can be omitted when this does not create any ambiguity:

#+BEGIN_src julia
a = 3;
2a
#+END_src

Julia has "assignment by operation" operators:

#+BEGIN_src julia
a = 2;
a += 7    # this is the same as a = a + 7
#+END_src

There is a *left* division operator:

#+BEGIN_src julia
2\8 == 8/2
#+END_src

The boolean type is a subtype of the integer type:

#+BEGIN_src julia
Bool <: Integer

false == 0
true == 1

a = true
b = false
3a + 2b
#+END_src

Julia supports fraction operations:

#+BEGIN_src julia
4//8
1//2 + 3//4
#+END_src

* Collections of elements

** Tuples

Immutable, indexable, possibly heterogeneous collections of elements:

#+BEGIN_src julia
typeof((2, 4, 1.0, "test"))
(2, 4, 1.0, "test")[2]
#+END_src

*** Named tuples

Tuples can have named components:

#+BEGIN_src julia
typeof((a=2, b=4, c=1.0, d="test"))

x = (a=2, b=4, c=1.0, d="test");
x[4] == x.d
#+END_src

** Dictionaries

Similarly to Python, Julia has dictionaries: associative collections of key/value pairs:

#+BEGIN_src julia
Dict("a"=>1, "b"=>2, "c"=>3)
#+END_src

** Arrays

Arrays are mutable, indexable, homogeneous collections of elements.

*** One dimension

Unidimensional arrays of one element:

#+BEGIN_src julia
[3]
[3.4]
["Hello, World!"]
#+END_src

Unidimensional arrays of multiple elements:

#+BEGIN_src julia
[3, 4]
#+END_src

Arrays are homogeneous collections, but look how Julia's abstract types make the following array possible:

#+BEGIN_src julia
[3, "hello"]
#+END_src

These 4 syntaxes are equivalent:

#+BEGIN_src julia
[2
4
8]
[2; 4; 8]
vcat(2, 4, 8)
cat(2, 4, 8, dims=1)
#+END_src

*** Two dimensions

#+BEGIN_src julia
[3 4]
[[1, 3] [1, 2]]
#+END_src

These 3 syntaxes are equivalent:

#+BEGIN_src julia
[2 4 8]
hcat(2, 4, 8)
cat(2, 4, 8, dims=2)
#+END_src

*** Syntax subtleties

Elements separated by semi-colons or end of line get expanded vertically. Those separated by commas do not get expanded. Elements separated by spaces or tabs get expanded horizontally.

{{<exsimplec>}}
Compare the outputs of the following:
{{</exsimplec>}}

#+BEGIN_src julia
[1:2; 3:4]

[1:2
 3:4]

[1:2, 3:4]

[1:2 3:4]
#+END_src

*** Initializing arrays

Here are a few of the functions initializing arrays:

#+BEGIN_src julia
rand(2, 3, 4)
rand(Int64, 2, 3, 4)
zeros(Int64, 2, 5)
ones(2, 5)
reshape([1, 2, 4, 2], (2, 2))
fill("test", (2, 2))
#+END_src

*** Comprehensions

Julia has comprehensions similar to Python:

#+BEGIN_src julia
[ 3i + j for i=1:10, j=3 ]
#+END_src

*** Indexing

As in other mathematically oriented languages such as R, Julia starts indexing at ~1~. \\
Indexing is done with square brackets:

#+BEGIN_src julia
a = [1 2; 3 4]
a[1, 1]
a[1, :]
a[:, 1]
#+END_src

{{<exsimplec>}}
Index the element on the 3<sup>rd</sup> row and 2<sup>nd</sup> column of {{<c>}}b{{</c>}}:
{{</exsimplec>}}

#+BEGIN_src julia
b = ["wrong" "wrong" "wrong"; "wrong" "wrong" "wrong"; "wrong" "you got it" "wrong"]
#+END_src

As in Python, by default, arrays are passed by sharing:

#+BEGIN_src julia
a = [1, 2, 3];
a[1] = 0;
a
#+END_src

This prevents the unwanted copying of arrays.

* Functions

** Function definition

There are 2 ways to define a new function:

*** Long form

#+BEGIN_src julia
function <name>(<arguments>)
    <body>
end
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function hello()
    println("Hello")
end
#+END_src

*** Assignment form

#+BEGIN_src julia
<name>(<arguments>) = <body>
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
hello() = println("Hello")
#+END_src

The function ~hello~ defined with this compact syntax is exactly the same as the one we defined above with the longer syntax.

** Calling functions

You call a function by running it followed by parentheses:

#+BEGIN_src julia
hello()
#+END_src

** Arguments

Our function ~hello~ does not accept any argument:

#+BEGIN_src julia
hello("Paul")

> ERROR: MethodError: no method matching hello(::String)
#+END_src

To define a function which accepts arguments, we need to add them in the function definition.

So maybe we could do this?

#+BEGIN_src julia
function hello(name)
    println("Hello name")
end

hello("Paul")
#+END_src

Oops. Not quite... This function works but does not give the result we wanted.

Here, we need to use [[https://en.wikipedia.org/wiki/String_interpolation][string interpolation]] with the ~$~ character:

#+BEGIN_src julia
function hello(name)
    println("Hello $name")
end

hello("Paul")
#+END_src

We can also set default argument values: if no arguments are given, the function is evaluated with the defaults.

#+BEGIN_src julia
function hello(name = "you")
    println("Hello $name")
end

hello("Paul")
hello()
#+END_src

#+BEGIN_note
Here is another example:
#+END_note

#+BEGIN_src python
function addTwo(a)
      a + 2
  end

addTwo(3)

# This can be written in a terse format with:
addtwo = a -> a + 2

# With default argument:
function addSomethingOrTwo(a, b = 2)
      a + b
  end

addSomethingOrTwo(3)
addSomethingOrTwo(3, 4)
#+END_src

** Returning the result

The value of the last expression is automatically returned, so ~return~ is unnecessary unless you want to return something else.

Look at these 5 functions:

#+BEGIN_src julia
function test1(x, y)
    x + y
end

function test2(x, y)
    return x + y
end

function test3(x, y)
    x * y
end

function test4(x, y)
    x * y
    x + y
end

function test5(x, y)
    return x * y
    x + y
end
#+END_src

{{<exsimplec>}}
Now, without running the code, try to guess the results of:
{{</exsimplec>}}

#+BEGIN_src julia
test1(1, 2)
test2(1, 2)
test3(1, 2)
test4(1, 2)
test5(1, 2)
#+END_src

Then run these expressions to see whether you got it right.

** Anonymous functions

Anonymous functions are functions which aren't given a name:

#+BEGIN_src julia
function (<arguments>)
    <body>
end
#+END_src

And in compact form:

#+BEGIN_src julia
<arguments> -> <body>
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function (name)
    println("Hello $name")
end
#+END_src

#+BEGIN_ex
Compact form:
#+END_ex

#+BEGIN_src julia
name -> println("Hello $name")
#+END_src

*** When would you want to use anonymous functions?

This is very useful for functional programming (when you apply a functionâfor instance ~map~ âto other functions to apply them in a vectorized manner which avoids repetitions).

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
map(name -> println("Hello $name"), ["Paul", "Lucie", "Sophie"]);
#+END_src

** Pipes

The Julia pipe looks like this: ~|>~. \\
It redirects the output of the expression on the left as the input of the expression on the right.

#+BEGIN_note
The following 2 expressions are thus equivalent:
#+END_note

#+BEGIN_src julia
println("Hello")
"Hello" |> println
#+END_src

#+BEGIN_note
Quick test:
#+END_note

#+BEGIN_src julia
sqrt(2) == 2 |> sqrt
#+END_src

** Function composition

This is done with the composition operator ~â~ (in the REPL, type {{<b>}}\circ{{</b>}} then press {{<b>}}&lt;tab&gt;{{</b>}}).

The following 2 expressions are equivalent:

#+BEGIN_src julia
<function2>(<function1>(<arguments>))

(<function2> â <function1>)(<arguments>)
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
exp(+(-3, 1))

(exp â +)(-3, 1)
#+END_src

{{<exsimplec>}}
Try to write the same expression in another 2 different ways.
{{</exsimplec>}}

** function!()

~!~ used after a function name indicates that the function modifies its argument(s).

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
a = [-2, 3, -5]

sort(a)
a

sort!(a)
a
#+END_src

** Broadcasting

To apply a function to each element of a collection rather than to the collection as a whole, Julia uses broadcasting.

#+BEGIN_src julia
a = [-3, 2, -5]
abs(a)

> ERROR: MethodError: no method matching abs(::Array{Int64,1})
#+END_src

This doesn't work because the function ~abs~ only applies to single elements.

By broadcasting ~abs~, you apply it to each element of ~a~:

#+BEGIN_src julia
broadcast(abs, a)
#+END_src

The dot notation is equivalent:

#+BEGIN_src julia
abs.(a)
#+END_src

It can also be applied to the pipe, to unary and binary operators, etc.

#+BEGIN_src julia
a .|> abs
#+END_src

{{<exsimplec>}}
Try to understand the difference between the following 2 expressions:
{{</exsimplec>}}

#+BEGIN_src julia
abs.(a) == a .|> abs
abs.(a) .== a .|> abs
#+END_src

** Methods

Julia uses [[https://en.wikipedia.org/wiki/Multiple_dispatch][multiple dispatch]]: functions can have several methods. When that is the case, the method applied depends on the types of all the arguments passed to the function (rather than only the first argument as is common in other languages).

#+BEGIN_src julia
methods(+)
#+END_src

let's you see that ~+~ has 166 methods!

Methods can be added to existing functions.

{{<exsimplec>}}
Try to understand the following example:
{{</exsimplec>}}

#+BEGIN_src julia
abssum(x::Int64, y::Int64) = abs(x + y)
abssum(x::Float64, y::Float64) = abs(x + y)

abssum(2, 4)
abssum(2.0, 4.0)
abssum(2, 4.0)
#+END_src

* Control flow

** Conditional statements

*** if

#+BEGIN_src julia
if <predicate>
    <do if true>
end
#+END_src

/(If predicate evaluates to false, do nothing)./

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x >= 0
        println("x is positive")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

Predicates can be built with many operators and functions.

#+BEGIN_ex
Examples of predicates:
#+END_ex

#+BEGIN_src julia
occursin("that", "this and that")
4 < 3
a != b
2 in 1:3
3 <= 4 && 4 > 5
3 <= 4 || 4 > 5
#+END_src

*** if else

#+BEGIN_src julia
if <predicate>
    <do if true>
else
    <do if false>
end
#+END_src

#+BEGIN_ex
Examples:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x >= 0
        println("x is positive")
    else
        println("x is negative")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

#+BEGIN_src julia
a = 2
b = 2.0

if a == b
      println("It's true")
  else
      println("It's false")
  end

if a === b
      println("It's true")
  else
      println("It's false")
  end
#+END_src

This can be written in a terse format:

#+BEGIN_src julia
<predicate> ? <do if true> : <do if false>
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
a === b ? println("It's true") : println("It's false")
#+END_src

*** if elseif else

#+BEGIN_src julia
if <predicate1>
    <do if predicate1 true>
elseif <predicate2>
    <do if predicate1 false and predicate2 true>
else
    <do if predicate1 and predicate2 false>
end
#+END_src

#+BEGIN_ex
Example:
#+END_ex

#+BEGIN_src julia
function testsign(x)
    if x > 0
        println("x is positive")
    elseif x == 0
        println("x is zero")
    else
        println("x is negative")
    end
end

testsign(3)
testsign(0)
testsign(-2)
#+END_src

** Loops

~while~ and ~for~ loops follow a syntax similar to that of functions:

#+BEGIN_src julia
for name = ["Paul", "Lucie", "Sophie"]
    println("Hello $name")
end
#+END_src

#+BEGIN_src julia
for i = 1:3, j = 3:5
    println(i + j)
end
#+END_src

#+BEGIN_src julia
i = 0

while i <= 10
    println(i)
    global i += 1
end
#+END_src

* Macros

Macros are a form of [[https://en.wikipedia.org/wiki/Metaprogramming][metaprogramming]] (the ability of a program to transform itself while running).

They resemble functions and just like functions, they accept as input a tuple of arguments. Unlike functions which return a value however, macros return an expression which is executed when the code is parsed (rather than at runtime). They are thus executed /before/ the code is run.

Macro's names are preceded by ~@~ (e.g. ~@time~).

Julia comes with many macros and you can create your own with:

#+BEGIN_src julia
macro <name>()
    <body>
end
#+END_src

* Sourcing a file

~include()~ sources a Julia script:

#+BEGIN_src julia
include("/path/to/file.jl")
#+END_src

* Comments & questions
